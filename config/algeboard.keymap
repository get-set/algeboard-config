/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/rgb.h>

/ {
    combos {
        compatible = "zmk,combos";

        hg_minus {
            bindings = <&kp MINUS>;
            key-positions = <37 38>;
        };

        xh_underscore {
            bindings = <&kp UNDERSCORE>;
            key-positions = <50 38>;
        };

        js_plus {
            bindings = <&kp PLUS>;
            key-positions = <34 39>;
        };

        dy_equal {
            bindings = <&kp EQUAL>;
            key-positions = <35 22>;
        };

        dk_lbrace {
            bindings = <&kp LEFT_BRACE>;
            key-positions = <35 40>;
        };

        dl_rbrace {
            bindings = <&kp RIGHT_BRACE>;
            key-positions = <35 41>;
        };

        vk_lbracket {
            bindings = <&kp LEFT_BRACKET>;
            key-positions = <52 40>;
        };

        vl_rbracket {
            bindings = <&kp RIGHT_BRACKET>;
            key-positions = <52 41>;
        };

        xk_lparenthesis {
            bindings = <&kp LEFT_PARENTHESIS>;
            key-positions = <50 40>;
        };

        xl_rparenthesis {
            bindings = <&kp RIGHT_PARENTHESIS>;
            key-positions = <50 41>;
        };

        vy_backslash {
            bindings = <&kp BACKSLASH>;
            key-positions = <52 22>;
        };

        ux_pipe {
            bindings = <&kp PIPE>;
            key-positions = <50 23>;
        };

        dm_grave {
            bindings = <&kp GRAVE>;
            key-positions = <35 55>;
        };

        bl_tide {
            bindings = <&kp TILDE>;
            key-positions = <53 41>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        mac {
            bindings = <
                   &kp DEL       &kp GRAVE     &kp N1    &kp N2        &kp N3     &kp N4     &kp N5       &kp N6     &kp N7    &kp N8     &kp N9    &kp N0     &kp MINUS   &kp EQUAL  &kp BACKSPACE
                   &kp F20       &kp TAB       &kp Q     &kp W         &kp E      &kp R      &kp T        &kp Y      &kp U     &kp I      &kp O     &kp P      &kp LBKT    &kp RBKT   &kp BACKSLASH
&kp C_VOL_UP       &lt 1 K_MUTE  &lt 2 ESCAPE  &kp A     &kp S         &kp D      &kp F      &kp G        &kp H      &kp J     &kp K      &kp L     &kp SEMI   &kp SQT     &kp ENTER  &kp PG_UP
&kp C_VOLUME_DOWN  &kp UP        &kp LSHIFT    &kp Z     &kp X         &kp C      &kp V      &kp B        &kp N      &kp M     &kp COMMA  &kp DOT   &kp SLASH  &kp RSHIFT  &kp UP     &kp PG_DN
&kp LEFT           &kp DOWN      &kp RIGHT     &kp LCMD  &kp LEFT_ALT  &kp LCTRL  &kp SPACE  &lt 3 SPACE  &kp RCTRL  &kp RALT  &mo 1      &kp LEFT  &kp DOWN   &kp RIGHT
            >;
        };

        kbfn {
            bindings = <
              &bt BT_CLR  &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3     &bt BT_SEL 4  &trans        &trans  &trans        &trans  &trans           &trans           &trans           &trans           &trans
              &trans      &trans        &trans        &trans        &trans           &trans        &trans        &trans  &out OUT_USB  &trans  &trans           &trans           &trans           &trans           &trans
&kp C_BRI_UP  &trans      &trans        &trans        &trans        &rgb_ug RGB_TOG  &trans        &trans        &trans  &trans        &trans  &trans           &trans           &trans           &trans           &rgb_ug RGB_EFR
&kp C_BRI_DN  &trans      &trans        &trans        &trans        &trans           &trans        &out OUT_BLE  &trans  &trans        &trans  &trans           &trans           &trans           &rgb_ug RGB_BRI  &rgb_ug RGB_EFF
&trans        &trans      &trans        &trans        &trans        &trans           &trans        &trans        &trans  &trans        &trans  &rgb_ug RGB_SAD  &rgb_ug RGB_BRD  &rgb_ug RGB_SAI
            >;
        };

        hyper {
            bindings = <
        &trans  &trans  &kp RC(RG(RA(RS(N1))))  &kp RC(RG(RA(RS(N2))))  &kp RC(RG(RA(RS(N3))))  &kp RC(RG(RA(RS(N4))))  &kp RC(RG(RA(RS(N5))))     &kp RC(RG(RA(RS(N6))))  &kp RC(RG(RA(RS(N7))))  &kp RC(RG(RA(RS(N8))))  &kp RC(RG(RA(RS(N9))))    &kp RC(RG(RA(RS(N0))))    &kp RC(RG(RA(RS(MINUS))))  &kp RC(RG(RA(RS(EQUAL))))  &kp RC(RG(RA(RS(BACKSPACE))))
        &trans  &trans  &kp RC(RG(RA(RS(Q))))   &kp RC(RG(RA(RS(W))))   &kp RC(RG(RA(RS(E))))   &kp RC(RG(RA(RS(R))))   &kp RC(RG(RA(RS(T))))      &kp HOME                &kp PAGE_DOWN           &kp PAGE_UP             &kp END                   &kp RC(RG(RA(RS(P))))     &kp RC(RG(RA(RS(LBKT))))   &kp RC(RG(RA(RS(RBKT))))   &kp RC(RG(RA(RS(BACKSLASH))))
&trans  &trans  &trans  &kp RC(RG(RA(RS(A))))   &kp RC(RG(RA(RS(S))))   &kp RC(RG(RA(RS(D))))   &kp RC(RG(RA(RS(F))))   &kp RC(RG(RA(RS(G))))      &kp LEFT                &kp DOWN                &kp UP                  &kp RIGHT                 &kp RC(RG(RA(RS(SEMI))))  &kp RC(RG(RA(RS(SQT))))    &kp RC(RG(RA(RS(ENTER))))  &kp RC(RG(RA(RS(PG_UP))))
&trans  &trans  &trans  &kp RC(RG(RA(RS(Z))))   &kp RC(RG(RA(RS(X))))   &kp RC(RG(RA(RS(C))))   &kp RC(RG(RA(RS(V))))   &kp RC(RG(RA(RS(B))))      &kp RC(RG(RA(RS(N))))   &kp RC(RG(RA(RS(M))))   &kp C_VOL_DN            &kp C_VOLUME_UP           &kp K_MUTE                &trans                     &kp RC(RG(RA(RS(UP))))     &kp RC(RG(RA(RS(PG_DN))))
&trans  &trans  &trans  &trans                  &trans                  &trans                  &trans                  &kp RC(RG(RA(RS(SPACE))))  &trans                  &trans                  &trans                  &kp RC(RG(RA(RS(LEFT))))  &kp RC(RG(RA(RS(DOWN))))  &kp RC(RG(RA(RS(RIGHT))))
            >;
        };

        rspace {
            bindings = <
              &trans  &trans  &kp F1         &kp F2         &kp F3     &kp F4                &kp F5         &kp F6  &kp F7                 &kp F8     &kp F9             &kp F10          &kp F11          &kp F12          &trans
              &trans  &trans  &trans         &kp BACKSPACE  &trans     &kp RS(LEFT_BRACKET)  &trans         &trans  &kp RS(RIGHT_BRACKET)  &trans     &kp DELETE         &trans           &trans           &trans           &trans
&kp C_BRI_UP  &trans  &trans  &kp RS(EQUAL)  &kp MINUS      &kp EQUAL  &kp LEFT_BRACKET      &kp GRAVE      &trans  &kp RIGHT_BRACKET      &kp ENTER  &kp RS(BACKSLASH)  &trans           &trans           &trans           &rgb_ug RGB_EFR
&kp C_BRI_DN  &trans  &trans  &trans         &kp RS(MINUS)  &trans     &kp BACKSLASH         &kp RS(GRAVE)  &trans  &trans                 &trans     &trans             &trans           &trans           &rgb_ug RGB_BRI  &rgb_ug RGB_EFF
&trans        &trans  &trans  &trans         &trans         &trans     &trans                &trans         &trans  &trans                 &trans     &rgb_ug RGB_SAD    &rgb_ug RGB_BRD  &rgb_ug RGB_SAI
            >;
        };
    };
};
